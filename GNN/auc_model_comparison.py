# -*- coding: utf-8 -*-
"""AUC Model Comparison.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R2tVNIROztgpHSrPmXeVlphhTFepPoQh
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn import svm
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import roc_auc_score, precision_recall_curve

features_path = 'adjusted_users.csv'
edges_path = 'edge.csv'

numeric_columns = [
    "follower_count", "following_count", "tweet_count", "listed_count",
    "year_created", "description_True", "description_False",
    "entities_True", "entities_False", "location_True", "location_False",
    "protected_True", "protected_False", "url_True", "url_False",
    "verified_True", "verified_False", "withheld_True", "withheld_False",
    "bot_True", "bot_False"
    ]

users = pd.read_csv(features_path, low_memory=False)
edges = pd.read_csv(edges_path)

features = users[numeric_columns]
true_labels = np.random.choice([0, 1], size=features.shape[0], p=[0.7, 0.3])

gcn_predictions = np.random.rand(features.shape[0])

scaler = StandardScaler()
features_scaled = scaler.fit_transform(features)

# Random Forest Classifier
rfc = RandomForestClassifier(max_depth=15,n_estimators=156,random_state=42, n_jobs=-1)
rfc.fit(features_scaled, true_labels)
rfc_predictions = rfc.predict_proba(features_scaled)[:, 1]

# AdaBoost Classifier
ada = AdaBoostClassifier(random_state=42, algorithm='SAMME', learning_rate=0.97, n_estimators=5)
ada.fit(features_scaled, true_labels)
ada_predictions = ada.predict_proba(features_scaled)[:, 1]

# Support Vector Machine (SVM) with balanced class weights
SVM = svm.LinearSVC(random_state=42)
SVM.fit(features_scaled, true_labels)
svm_predictions = SVM._predict_proba_lr(features_scaled)[:, 1]

# K-Nearest Neighbors (KNN)
knn = KNeighborsClassifier()
knn.fit(features_scaled, true_labels)
knn_predictions = knn.predict_proba(features_scaled)[:, 1]

# AUC Score Calculation and Visualization
models = {
    "RFC": rfc_predictions,
    "ADA": ada_predictions,
    "GCN": gcn_predictions,
    "SVM": svm_predictions,
    "KNN": knn_predictions
}

# Calculate AUC scores
auc_scores = {model_name: roc_auc_score(true_labels, predictions) for model_name, predictions in models.items()}

# Print AUC Scores
print("AUC Scores for Models:")
for model_name, auc in auc_scores.items():
    print(f"{model_name}: {auc:.4f}")

# AUC Bar Plot
plt.figure(figsize=(8, 6))
plt.bar(auc_scores.keys(), auc_scores.values(), color=['blue', 'orange', 'green', 'red', 'purple'])
plt.title("AUC Scores Model Comparison")
plt.ylabel("AUC Score")
plt.ylim(0.0, 1.0)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Precision-Recall Curve Visualization
def plot_precision_recall(models, true_labels, title="Precision-Recall Curves"):
    """
    Function to plot Precision-Recall curves for multiple models.
    """
    plt.figure(figsize=(10, 8))
    for model_name, predictions in models.items():
        precision, recall, _ = precision_recall_curve(true_labels, predictions)
        plt.plot(recall, precision, label=model_name)

    plt.xlabel("Recall")
    plt.ylabel("Precision")
    plt.title(title)
    plt.legend(loc='lower left')
    plt.grid(alpha=0.3)
    plt.tight_layout()
    plt.show()

plot_precision_recall(models, true_labels, title="Precision-Recall Curves for Models")
